///////////////////////////////////////////////////////////////////////////////
// Project:     Zwischen
// File:        Ride.java
// Group:       3
// Date:        November 26, 2018
// Description: Concrete class ride represents a ride generated by user input
///////////////////////////////////////////////////////////////////////////////

package other;

import static other.Globals.getCurrentUser;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import messages.MessagesController;

public class Ride {

  public String getDriver() {
    return driver;
  }

  public void setDriver(String driver) {
    this.driver = driver;
  }

  public String getDest() {
    return dest;
  }

  public void setDest(String dest) {
    this.dest = dest;
  }

  public Date getDate() {
    return date;
  }

  public void setDate(Date date) {
    this.date = date;
  }

  public String getStartP() {
    return startP;
  }

  public void setStartP(String startP) {
    this.startP = startP;
  }

  public int getIdnumber() {
    return idnumber;
  }

  public void setIdnumber(int idnumber) {
    this.idnumber = idnumber;
  }

  public Integer getSeats() {
    return seats;
  }

  public void setSeats(Integer seats) {
    this.seats = seats;
  }

  private static int nextIDNumber = 0;
  private Button message;

  public CheckBox getCheckBox() {
    return checkBox;
  }

  public void setCheckBox(CheckBox checkBox) {
    this.checkBox = checkBox;
  }

  private String driver;
  private String dest;
  private Date date;
  private String startP;
  private Integer seats;
  private CheckBox checkBox;
  private int idnumber;

  /**
   * Constructor fo the class Ride.
   *
   * @param driver the driver
   * @param dest the destination
   * @param startP the starting location
   * @param date the date of the ride
   * @param seats the number of seats in the car
   */
  public Ride(String driver, String dest, String startP, Date date, int seats) {
    setDriver(driver);
    setDest(dest);
    setDate(date);
    setStartP(startP);
    setSeats(seats);
    setIdnumber(nextIDNumber++);
    this.message = new Button();

    this.message.setOnAction((ActionEvent event) -> {
      Globals.changeScene("messages/Messages.fxml");
      try {
        FXMLLoader loader = new FXMLLoader(
            getClass().getClassLoader().getResource("messages/Messages.fxml"));
        MessagesController controller = loader.getController();
        ComboBox<String> comboBox = controller.getRecipient();
        comboBox.getSelectionModel().select(changeAndMessage(idnumber));
      } catch (SQLException e) {
        e.printStackTrace();
      }
    });

    this.checkBox = new CheckBox();
  }

  /**
   * An overloaded constructor for the class Ride.
   *
   * @param driver the driver
   * @param dest the destination
   * @param startP the starting location
   * @param date the data of the ride
   */
  public Ride(String driver, String dest, String startP, Date date) {
    this.driver = driver;
    this.dest = dest;
    this.date = date;
    this.startP = startP;
    this.message = new Button();

    this.message.setOnAction((ActionEvent event) -> {
      Globals.changeScene("messages/Messages.fxml");
      try {
        FXMLLoader loader = new FXMLLoader(
            getClass().getClassLoader().getResource("messages/Messages.fxml"));
        MessagesController controller = loader.getController();
        ComboBox<String> comboBox = controller.getRecipient();
        comboBox.getSelectionModel().select(changeAndMessage(idnumber));
      } catch (SQLException e) {
        e.printStackTrace();
      }
    });

    this.checkBox = new CheckBox();

  }

  /*
  This method already exists
  private void setIdnumber() {
    this.idnumber = nextIDNumber++;
  }
  */

  public Button getMessage() {
    return message;
  }

  public void setMessage(Button message) {
    this.message = message;
  }

  String changeAndMessage(int p) throws SQLException {
    PastRide[] pastRides = new PastRide[p];
    Connection conn126 = DriverManager.getConnection(
        "jdbc:derby:lib/ZwischenDB");
    ResultSet resultSet126;
    try (Statement stmt126 = conn126.createStatement()) {

      //String query1 = "SELECT USERNAME FROM LOGIN WHERE UserName='"+ username+"';
      resultSet126 = stmt126
          .executeQuery(String.format("SELECT * FROM PAST_RIDE WHERE DRIVER = '%s' OR RIDER = '%s'",
              getCurrentUser().getUsername(), getCurrentUser().getUsername()));
      if (resultSet126.next()) {
        while (resultSet126.next()) {
          int i = 0;
          PastRide pastRide = new PastRide(resultSet126.getString("DRIVER"),
              resultSet126.getString("RIDER"),
              resultSet126.getString("GOINTTO"), resultSet126.getString("COMINGFROM"),
              resultSet126.getDate("OCCURRANCE"));
          pastRides[i] = pastRide;
        }

      }
      conn126.close();

    }
    resultSet126.close();
    if (getCurrentUser().getUsername().equals(pastRides[p].getRider())) {
      return pastRides[p].getDriver();
    } else {
      return pastRides[p].getRider();
    }

  }
}
